#!/usr/bin/env python
# coding: utf-8

# ## Задание 1

# Дан список с визитами по городам и странам. 
# Напишите код, который возвращает отфильтрованный список geo_logs, содержащий только визиты из России.

# In[2]:


geo_logs = [
    {'visit1': ['Москва', 'Россия']},
    {'visit2': ['Дели', 'Индия']},
    {'visit3': ['Владимир', 'Россия']},
    {'visit4': ['Лиссабон', 'Португалия']},
    {'visit5': ['Париж', 'Франция']},
    {'visit6': ['Лиссабон', 'Португалия']},
    {'visit7': ['Тула', 'Россия']},
    {'visit8': ['Тула', 'Россия']},
    {'visit9': ['Курск', 'Россия']},
    {'visit10': ['Архангельск', 'Россия']}
]


# In[3]:


list(filter(lambda visit: 'Россия' in list(visit.values())[0], geo_logs))


# ## Задание 2

# Выведите на экран все уникальные гео-ID из значений словаря ids. Т. е. список вида [213, 15, 54, 119, 98, 35]

# In[2]:


ids = {'user1': [213, 213, 213, 15, 213], 
       'user2': [54, 54, 119, 119, 119], 
       'user3': [213, 98, 98, 35]}


# In[3]:


list(set(sum(list(ids.values()),[])))


# ## Задание 3

# Дан список поисковых запросов. Получить распределение количества слов в них. 
# Т. е. поисковых запросов из одного - слова 5%, из двух - 7%, из трех - 3% и т.д.

# In[9]:


queries = [
    'смотреть сериалы онлайн',
    'новости спорта',
    'афиша кино',
    'курс доллара',
    'сериалы этим летом',
    'курс по питону',
    'сериалы про спорт'
]


# In[18]:


num_words = []
for words in queries :
    num_words.append(len(words.split()))
first_queries = round (num_words.count(3)*100/len(queries),1)
second_queries = round (num_words.count(2)*100/len(queries),1)
print('Поисковых запросов из одного слова - ' + str (first_queries) + '%, поисковых запросов из 2 слов -'+ str (second_queries) + '%')


# ## Задание 4

# Дана статистика рекламных каналов по объемам продаж. Напишите скрипт, который возвращает название канала с максимальным объемом.
# Т. е. в данном примере скрипт должен возвращать 'yandex'.

# In[39]:


stats = {'facebook': 55, 'yandex': 120, 'vk': 115, 'google': 99, 'email': 42, 'ok': 98}


# In[40]:


inverse = [(key, value) for key, value in stats.items()]
max(inverse) [0]


# ## Задание 5

# Дан поток логов по количеству просмотренных страниц для каждого пользователя. Список отсортирован по ID пользователя. Вам необходимо написать алгоритм, который считает среднее значение просмотров на пользователя. 
# Т. е. надо посчитать отношение суммы всех просмотров к количеству уникальных пользователей.

# In[34]:


stream = [
    '2018-01-01,user1,3',
    '2018-01-07,user1,4',
    '2018-03-29,user1,1',
    '2018-04-04,user1,13',
    '2018-01-05,user2,7',
    '2018-06-14,user3,4',
    '2018-07-02,user3,10',
    '2018-03-21,user4,19',
    '2018-03-22,user4,4',
    '2018-04-22,user4,8',
    '2018-05-03,user4,9',
    '2018-05-11,user4,11',
]


# In[40]:


stream_views_split = []
for el_stream_views in stream:
    stream_views_split.append(int((el_stream_views.split(','))[2]))


# In[39]:


stream_users_split = []
for el_stream_users in stream:
    stream_users_split.append((el_stream_users.split(','))[1])


# In[38]:


result = (sum(set(stream_views_split)))/(len(set(stream_users_split)))
print(result)


# In[ ]:


# Я не сообразила как объединить эти 2 цикла в один, напишите пжл в комментарии к ДЗ как должно быть. Буду благодарна!


# ## Задание 6

# Дана статистика рекламных кампаний по дням. Напишите алгоритм, который по паре дата-кампания ищет значение численного столбца. 
# Т. е. для даты '2018-01-01' и 'google' нужно получить число 25. 
# Считайте, что все комбинации дата-кампания уникальны.

# In[23]:


stats = [
    ['2018-01-01', 'google', 25],
    ['2018-01-01', 'yandex', 65],
    ['2018-01-01', 'market', 89],
    ['2018-01-02', 'google', 574],
    ['2018-01-02', 'yandex', 249],
    ['2018-01-02', 'market', 994],
    ['2018-01-03', 'google', 1843],
    ['2018-01-03', 'yandex', 1327],
    ['2018-01-03', 'market', 1764],
]


# In[27]:


user_input_date=str(input('Введите дату '))
user_input_service=input('Введите сервис ')
for index in stats :
    if user_input_date == index [0] and user_input_service == index [1] :
        print (index [2])
    else:
        print ("Дата и сервис не найдены")
    break

